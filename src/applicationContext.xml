<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">	
 
   <context:component-scan base-package="dao,servicesDao"></context:component-scan>
	<!-- 加载配置文件 -->
	<!-- <context:property-placeholder location="classpath:db.properties" /> -->

	<!-- 数据源，使用dbcp -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="org.gjt.mm.mysql.Driver" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/empweb" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="root" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="root" />
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="4" />
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="1" />
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="1" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 用它来解决mysql 8小时自动释放连接的问题 -->
		<property name="maxIdleTime" value="28000" />
	</bean>


 	<!-- sqlSessinFactory -->
<!-- 	

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		加载mybatis的配置文件
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
		数据源
		<property name="dataSource" ref="dataSource" />
	</bean>

	mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 遵循规范：
	将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录中自动扫描出来的mapper的bean的id为mapper类名（首字母小写）
	经过扫描后生成的代理bean实例是线程安全的
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		指定扫描的包名 如果扫描多个包，每个包中间使用半角逗号分隔
		<property name="basePackage" value="dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> 
	
-->
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
			    <value>entity/User.hbm.xml</value>
				<value>entity/Employee.hbm.xml</value>	
			</list>
		</property>
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="append*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="repair" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delAndRepair" propagation="REQUIRED" rollback-for="Exception" />

			<tx:method name="get*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="select*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="find*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="load*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="search*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="datagrid*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="count" propagation="SUPPORTS" rollback-for="Exception" />
             <tx:method name="login*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="*" propagation="SUPPORTS" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* servicesDao..*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>
</beans>